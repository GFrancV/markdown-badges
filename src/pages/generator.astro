---
import Typography from "../components/Typography.astro";
import Layout from "../layouts/Layout.astro";
import Input from "../components/Input.astro";

async function getSimpleIcons(): Promise<string[]> {
  const req = await fetch(
    "https://raw.githubusercontent.com/simple-icons/simple-icons/develop/_data/simple-icons.json"
  );
  const data = await req.json();

  return data.icons.map((icon: { title: string }) => icon.title);
}

const simpleIcons = await getSimpleIcons();
---

<Layout title="Generator - Markdown Badges">
  <section>
    <Typography as="h1" variant="big" color="white" class="mb-8">
      Badges generator
    </Typography>
    <div class="grid md:grid-cols-2 gap-8">
      <div>
        <div class="mb-4">
          <Typography as="h3" variant="h3" color="white" class="mb-2">
            Badge name
          </Typography>
          <Input id="badgeName" value="GitHub" placeholder="Enter badge name" />
        </div>
        <div class="grid md:grid-cols-3 mb-4">
          <div>
            <Typography as="h3" variant="h3" color="white" class="mb-2">
              Logo color
            </Typography>
            <input id="logoColor" type="color" value="#ffffff" />
          </div>
          <div>
            <Typography as="h3" variant="h3" color="white" class="mb-2">
              Left color
            </Typography>
            <input id="leftColor" type="color" value="#000000" />
          </div>
          <div>
            <Typography as="h3" variant="h3" color="white" class="mb-2">
              Right color
            </Typography>
            <input id="rightColor" type="color" value="#000000" />
          </div>
        </div>
        <div class="mb-4">
          <Typography as="h3" variant="h3" color="white" class="mb-2">
            Badge logo
          </Typography>
          <div id="badgeLogo" class="relative">
            <Input
              id="badgeLogoValue"
              value="GitHub"
              placeholder="Enter badge logo"
              autoComplete={false}
            />
            <ul
              id="logoResults"
              style="display: none;"
              class="absulte text-sm max-h-64 overflow-y-auto mt-2 py-2 bg-[#1e1e1e] rounded border-0 text-[#f1f1ef] shadow-lg"
              data-icons={JSON.stringify(simpleIcons)}
            >
            </ul>

            <script>
              import { $ } from "../utils/dom-selector";
              import type { BadgeImage } from "./generator.astro.1.mts";

              const badgeLogoValue = $("#badgeLogoValue") as HTMLInputElement;
              const badge = $("badge-image") as BadgeImage;
              const logoResults = $("#logoResults") as HTMLUListElement;

              badgeLogoValue?.addEventListener("focus", () => {
                logoResults.style.display = "block";
              });

              badgeLogoValue?.addEventListener("blur", () => {
                setTimeout(() => {
                  logoResults.style.display = "none";
                }, 200);
              });

              badgeLogoValue?.addEventListener("input", (e) => {
                const value = (e.target as HTMLInputElement).value;
                const icons = JSON.parse(logoResults?.dataset.icons || "[]");

                if (!logoResults) return;

                const filteredIcons = icons.filter((icon: string) =>
                  icon.toLowerCase().includes(value.toLowerCase())
                );

                logoResults.innerHTML = "";
                filteredIcons.forEach((icon: string) => {
                  const li = document.createElement("li");
                  const button = document.createElement("button");
                  button.classList.add(
                    "inline-flex",
                    "w-full",
                    "px-6",
                    "py-2",
                    "hover:bg-fuchsia-300",
                    "hover:text-black"
                  );
                  button.textContent = icon;

                  button.addEventListener("click", () => {
                    badgeLogoValue.value = icon;
                    logoResults.innerHTML = "";
                    badge.setAttribute("icon", icon);
                  });

                  logoResults.appendChild(li);
                  li.appendChild(button);
                });

                badge.setAttribute("icon", value);
              });
            </script>
          </div>
        </div>
      </div>
      <div>
        <badge-image></badge-image>
      </div>
    </div>
    <script>
      import { $ } from "../utils/dom-selector";

      export class BadgeImage extends HTMLElement {
        private name: string = "GitHub";
        private logocolor: string = "ffffff";
        private leftcolor: string = "000000";
        private rightcolor: string = "000000";
        private icon: string = "Github";

        private img: HTMLImageElement;
        private markdownCode: HTMLElement;
        private imgCode: HTMLElement;

        static get observedAttributes() {
          return ["name", "icon", "logocolor", "rightcolor", "leftcolor"];
        }

        constructor() {
          super();
          this.id = "badge";

          this.img = document.createElement("img");
          this.img.src = this.getSrc();

          const codeElementClassList = [
            "block",
            "bg-[#1e1e1e]",
            "rounded",
            "p-4",
            "text-[#f1f1ef]",
            "shadow-lg",
            "mb-4",
            "overflow-x-auto",
            "w-full",
          ];

          this.markdownCode = document.createElement("code");
          this.markdownCode.classList.add(...codeElementClassList);
          this.markdownCode.textContent = `![${this.name}](${this.getSrc()})`;

          this.imgCode = document.createElement("code");
          this.imgCode.classList.add(...codeElementClassList);
          this.imgCode.textContent = `<img src="${this.getSrc()}" alt="${this.name}" />`;

          this.appendChild(this.img);
          this.appendChild(this.markdownCode);
          this.appendChild(this.imgCode);
        }

        public attributeChangedCallback(
          name: string,
          oldValue: string,
          newValue: string
        ) {
          if (oldValue === newValue) return;

          if (name === "name") {
            this.name = newValue;
          } else if (name === "logocolor") {
            const sanitizeColor = newValue.replace("#", "");
            this.logocolor = sanitizeColor;
          } else if (name === "rightcolor") {
            const sanitizeColor = newValue.replace("#", "");
            this.rightcolor = sanitizeColor;
          } else if (name === "leftcolor") {
            const sanitizeColor = newValue.replace("#", "");
            this.leftcolor = sanitizeColor;
          } else if (name === "icon") {
            this.icon = newValue;
          }
          this.img.src = this.getSrc();
        }

        public getSrc(): string {
          return `https://img.shields.io/badge/${this.name}-100000?style=for-the-badge&logo=${this.icon}&logoColor=${this.logocolor}&labelColor=${this.leftcolor}&color=${this.rightcolor}`;
        }
      }

      customElements.define("badge-image", BadgeImage);

      const badge = $("badge-image") as BadgeImage;

      const badgeName = $("#badgeName");
      const logoColor = $("#logoColor");
      const leftColor = $("#leftColor");
      const rightColor = $("#rightColor");

      badgeName?.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;

        badge.setAttribute("name", value);
      });

      logoColor?.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;

        badge.setAttribute("logocolor", value);
      });

      leftColor?.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;

        badge.setAttribute("leftcolor", value);
      });

      rightColor?.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;

        badge.setAttribute("rightcolor", value);
      });
    </script>
  </section>
</Layout>
